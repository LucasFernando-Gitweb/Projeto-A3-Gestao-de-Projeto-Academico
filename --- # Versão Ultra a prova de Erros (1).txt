--- # Versão Ultra a prova de Erros --- 

##--✅ Características Ultra Seguras

Menus totalmente protegidos contra entradas inválidas.

Datas e números validados e solicitados novamente se estiverem incorretos.

Limite de projetos por usuário aplicado automaticamente.

Todas as chaves fechadas, sem risco de reached end of file while parsing.

CSV gerado em caminho seguro, mesmo no Windows/OneDrive.

Notificações simuladas no console para cada ação.
Recursos desta versão Ultra Segura

Login e usuários pré-cadastrados: Lucas, Carol, Thamiris, Rodrigo.

Menus protegidos: entradas inválidas não travam o programa.

Datas validadas: pede repetidamente até que estejam no formato YYYY-MM-DD.

Limite de 4 projetos por usuário garantido.

Tarefas com prioridade e status.

Conclusão/cancelamento de tarefas com registro de motivo.

Exportação segura para CSV, evitando problemas de caminho em Windows.

Notificações simuladas no console.

Fechamento correto de todas as chaves, evitando erros de parsing.

Tratamento de exceções em todos os pontos críticos de entrada. ----## APAGAR ESSE TEXTO COMPLETO PARA EXECUTAR---#





import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.*;

// ===================== ENUMS =====================
enum Perfil { ADMINISTRADOR, GERENTE, COLABORADOR }
enum Status { PLANEJANDO, EM_ANDAMENTO, CONCLUIDO, CANCELADO, ATRASADO }
enum Prioridade { ALTA, MEDIA, NORMAL, BAIXA }

// ===================== CLASSES =====================
class Usuario {
    private String nome, email, login, senha, cargo;
    private Perfil perfil;
    private List<Projeto> projetos = new ArrayList<>();

    public Usuario(String nome, String email, String login, String senha, String cargo, Perfil perfil) {
        this.nome = nome; this.email = email; this.login = login; this.senha = senha;
        this.cargo = cargo; this.perfil = perfil;
    }

    public String getNome() { return nome; }
    public String getEmail() { return email; }
    public String getLogin() { return login; }
    public String getSenha() { return senha; }
    public Perfil getPerfil() { return perfil; }
    public List<Projeto> getProjetos() { return projetos; }

    public boolean adicionarProjeto(Projeto p) {
        if (projetos.size() < 4) { projetos.add(p); return true; }
        else { System.out.println("❌ Usuário já está em 4 projetos."); return false; }
    }
}

class Tarefa {
    private String descricao, motivoCancelamento, motivoAtraso;
    private LocalDate inicio, fimPrevisto, fimReal;
    private Status status;
    private Prioridade prioridade;
    private Usuario responsavel;
    private static Scanner scanner = new Scanner(System.in);

    public Tarefa(String descricao, LocalDate inicio, LocalDate fimPrevisto, Prioridade prioridade, Usuario responsavel) {
        this.descricao = descricao;
        this.inicio = inicio; this.fimPrevisto = fimPrevisto; this.prioridade = prioridade;
        this.responsavel = responsavel; this.status = Status.PLANEJANDO;
    }

    public void concluir() {
        fimReal = LocalDate.now();
        if(fimReal.isAfter(fimPrevisto)) {
            status = Status.ATRASADO;
            System.out.println("⚠️ Informe o motivo do atraso:");
            motivoAtraso = scanner.nextLine();
        } else {
            status = Status.CONCLUIDO;
        }
        notificar("conclusão");
    }

    public void cancelar() {
        status = Status.CANCELADO;
        System.out.println("❌ Informe o motivo do cancelamento:");
        motivoCancelamento = scanner.nextLine();
        notificar("cancelamento");
    }

    private void notificar(String tipo) {
        System.out.println("\n=== Notificação (simulada) ===");
        System.out.println("Para: " + responsavel.getEmail());
        if(tipo.equals("conclusão")) System.out.println("Mensagem: Obrigado por concluir a tarefa \"" + descricao + "\"!");
        else System.out.println("Mensagem: Tarefa \"" + descricao + "\" cancelada. Motivo: " + motivoCancelamento);
        System.out.println("Para: Administrador e Gerente (simulado)");
        System.out.println("Mensagem: " + responsavel.getNome() + " atualizou a tarefa \"" + descricao + "\" com status " + status);
        System.out.println("=============================\n");
    }

    public String exportarCSV(String projeto, Usuario admin, Usuario gerente) {
        return projeto + ";" + admin.getNome() + ";" + gerente.getNome() + ";" + responsavel.getNome() + ";" +
               descricao + ";" + inicio + ";" + fimPrevisto + ";" + status + ";" +
               (motivoCancelamento != null ? motivoCancelamento : motivoAtraso != null ? motivoAtraso : "");
    }

    @Override
    public String toString() {
        return descricao + " | Resp: " + responsavel.getNome() + " | Status: " + status + " | Prioridade: " + prioridade;
    }
}

class Projeto {
    private String nome, descricao;
    private Usuario administrador, gerente;
    private List<Usuario> equipe = new ArrayList<>();
    private List<Tarefa> tarefas = new ArrayList<>();

    public Projeto(String nome, String descricao, Usuario admin, Usuario gerente) {
        this.nome = nome; this.descricao = descricao; this.administrador = admin; this.gerente = gerente;
    }

    public boolean adicionarMembro(Usuario u) {
        if(u.adicionarProjeto(this)) {
            equipe.add(u);
            System.out.println("✅ Membro adicionado: " + u.getNome());
            return true;
        } else return false;
    }

    public void adicionarTarefa(Tarefa t) { tarefas.add(t); }
    public List<Tarefa> getTarefas() { return tarefas; }
    public Usuario getAdministrador() { return administrador; }
    public Usuario getGerente() { return gerente; }
    public String getNome() { return nome; }
    public List<Usuario> getEquipe() { return equipe; }

    public void exportarCSV() {
        try {
            File file = new File("projetos_export.csv");
            FileWriter writer = new FileWriter(file, true);
            for(Tarefa t: tarefas) writer.write(t.exportarCSV(nome, administrador, gerente) + "\n");
            writer.close();
            System.out.println("✅ Dados exportados para " + file.getAbsolutePath());
        } catch(IOException e) {
            System.out.println("Erro ao exportar CSV: " + e.getMessage());
        }
    }

    @Override
    public String toString() {
        return "\nProjeto: " + nome + "\nDescrição: " + descricao + "\nAdministrador: " + administrador.getNome() +
               "\nGerente: " + gerente.getNome() + "\nEquipe: " + equipe.size() + " membros\nTarefas: " + tarefas.size();
    }
}

// ===================== SISTEMA =====================
public class SistemaFinal {
    private static List<Usuario> usuarios = new ArrayList<>();
    private static List<Projeto> projetos = new ArrayList<>();
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        seedUsuarios();
        menuLogin();
    }

    private static void seedUsuarios() {
        usuarios.add(new Usuario("Lucas Silva","lucas.silva@email.com","lucas.silva","Padrao123","PO",Perfil.ADMINISTRADOR));
        usuarios.add(new Usuario("Carol Cavalcante","carol.cavalcante@email.com","carol.cavalcante","Padrao123","Gerente",Perfil.GERENTE));
        usuarios.add(new Usuario("Thamiris Marie","thamiris.marie@email.com","thamiris.marie","Padrao123","Analista",Perfil.COLABORADOR));
        usuarios.add(new Usuario("Rodrigo Bat","rodrigo.bat@email.com","rodrigo.bat","Padrao123","Analista",Perfil.COLABORADOR));
    }

    private static void menuLogin() {
        while(true) {
            System.out.println("\n===== LOGIN =====");
            System.out.print("Login ou E-mail: "); String login = scanner.nextLine();
            System.out.print("Senha: "); String senha = scanner.nextLine();

            Usuario usuario = autenticar(login, senha);
            if(usuario == null) System.out.println("❌ Credenciais inválidas.");
            else { System.out.println("✅ Bem-vindo, " + usuario.getNome()); menuPrincipal(usuario); break; }
        }
    }

    private static Usuario autenticar(String loginOuEmail, String senha) {
        for(Usuario u: usuarios)
            if((u.getLogin().equalsIgnoreCase(loginOuEmail) || u.getEmail().equalsIgnoreCase(loginOuEmail))
               && u.getSenha().equals(senha)) return u;
        return null;
    }

    private static void menuPrincipal(Usuario usuario) {
        boolean rodando = true;
        while(rodando) {
            System.out.println("\n===== MENU PRINCIPAL =====");
            System.out.println("1. Criar Projeto");
            System.out.println("2. Listar Projetos");
            System.out.println("3. Abrir Projeto");
            System.out.println("4. Exportar Projetos para CSV");
            System.out.println("5. Sair");
            System.out.print("Escolha: "); 
            int opcao = lerIntSeguro(1,5);
            switch(opcao) {
                case 1 -> criarProjeto(usuario);
                case 2 -> listarProjetos();
                case 3 -> abrirProjeto(usuario);
                case 4 -> exportarProjetos();
                case 5 -> { rodando=false; System.out.println("Até mais!"); }
            }
        }
    }

    private static int lerIntSeguro(int min, int max) {
        while(true) {
            try {
                int n = Integer.parseInt(scanner.nextLine());
                if(n>=min && n<=max) return n;
            } catch(Exception ignored) {}
            System.out.print("Entrada inválida, tente novamente: ");
        }
    }

    private static LocalDate lerDataSegura(String prompt) {
        while(true) {
            System.out.print(prompt);
            try { return LocalDate.parse(scanner.nextLine()); }
            catch(DateTimeParseException e) { System.out.println("Formato inválido. Use YYYY-MM-DD."); }
        }
    }

    private static void criarProjeto(Usuario usuario) {
        System.out.print("Nome do projeto: "); String nome = scanner.nextLine();
        System.out.print("Descrição: "); String desc = scanner.nextLine();
        Projeto projeto = new Projeto(nome, desc, usuario, usuario);
        projetos.add(projeto);
        usuario.adicionarProjeto(projeto);
        System.out.println("✅ Projeto criado: " + nome);
        menuProjeto(projeto, usuario);
    }

    private static void listarProjetos() {
        if(projetos.isEmpty()) { System.out.println("Nenhum projeto cadastrado."); return; }
        for(int i=0;i<projetos.size();i++) {
            Projeto p = projetos.get(i);
            System.out.println(i + " - " + p.getNome() + " | Gerente: " + p.getGerente().getNome() + " | Membros: " + p.getEquipe().size());
        }
    }

    private static void abrirProjeto(Usuario usuario) {
        listarProjetos();
        System.out.print("Número do projeto para abrir: "); 
        int idx = lerIntSeguro(0, projetos.size()-1);
        Projeto p = projetos.get(idx);
        menuProjeto(p, usuario);
    }

    private static void menuProjeto(Projeto projeto, Usuario usuario) {
        boolean rodando = true;
        while(rodando) {
            System.out.println("\n===== PROJETO: " + projeto.getNome() + " =====");
            System.out.println("1. Adicionar membro (Admin/Gerente)");
            System.out.println("2. Adicionar tarefa");
            System.out.println("3. Listar tarefas");
            System.out.println("4. Voltar");
            int opcao = lerIntSeguro(1,4);
            switch(opcao) {
                case 1 -> {
                    if(usuario.getPerfil() == Perfil.COLABORADOR)
                        System.out.println("❌ Você não tem permissão para adicionar membros.");
                    else adicionarMembro(projeto);
                }
                case 2 -> adicionarTarefa(projeto);
                case 3 -> listarTarefas(projeto);
                case 4 -> rodando=false;
            }
        }
    }

    private static void adicionarMembro(Projeto projeto) {
        System.out.println("Selecione usuário para adicionar:");
        for (int i = 0; i < usuarios.size(); i++) {
            System.out.println(i + " - " + usuarios.get(i).getNome() + " (" + usuarios.get(i).getPerfil() + ")");
        }
        int escolha = lerIntSeguro(0, usuarios.size()-1);
        projeto.adicionarMembro(usuarios.get(escolha));
    }

    private static void adicionarTarefa(Projeto projeto) {
        System.out.print("Descrição da tarefa: "); 
        String desc = scanner.nextLine();
        if(projeto.getEquipe().isEmpty()) { System.out.println("Não há membros na equipe."); return; }

        System.out.println("Escolha responsável:");
        List<Usuario> equipe = projeto.getEquipe();
        for (int i=0;i<equipe.size();i++) System.out.println(i + " - " + equipe.get(i).getNome());
        int idx = lerIntSeguro(0, equipe.size()-1);
        Usuario responsavel = equipe.get(idx);

        LocalDate inicio = lerDataSegura("Data de início (YYYY-MM-DD): ");
        LocalDate fimPrev = lerDataSegura("Data prevista de fim (YYYY-MM-DD): ");

        System.out.println("Escolha prioridade: 1-Alta 2-Media 3-Normal 4-Baixa");
        int p = lerIntSeguro(1,4);
        Prioridade prioridade = switch(p) {
            case 1 -> Prioridade.ALTA;
            case 2 -> Prioridade.MEDIA;
            case 3 -> Prioridade.NORMAL;
            case 4 -> Prioridade.BAIXA;
            default -> Prioridade.NORMAL;
        };

        Tarefa t = new Tarefa(desc, inicio, fimPrev, prioridade, responsavel);
        projeto.adicionarTarefa(t);
        System.out.println("✅ Tarefa criada: " + desc);
    }

    private static void listarTarefas(Projeto projeto) {
        List<Tarefa> tarefas = projeto.getTarefas();
        if(tarefas.isEmpty()) { System.out.println("Nenhuma tarefa cadastrada."); return; }
        for(int i=0;i<tarefas.size();i++) System.out.println(i + " - " + tarefas.get(i));

        System.out.println("Deseja atualizar tarefa? S/N");
        String opc = scanner.nextLine();
        if(opc.equalsIgnoreCase("S")) {
            System.out.print("Número da tarefa: "); 
            int idx = lerIntSeguro(0, tarefas.size()-1);
            Tarefa t = tarefas.get(idx);

            System.out.println("1- Concluir 2- Cancelar 3- Voltar"); 
            int acao = lerIntSeguro(1,3);
            if(acao==1) t.concluir();
            else if(acao==2) t.cancelar();
        }
    }

    private static void exportarProjetos() {
        for(Projeto p: projetos) p.exportarCSV();
    }
}