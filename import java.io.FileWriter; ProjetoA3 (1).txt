import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.*;

// ===================== ENUMS =====================
enum Perfil { ADMINISTRADOR, GERENTE, COLABORADOR }
enum Status { PLANEJANDO, EM_ANDAMENTO, CONCLUIDO, CANCELADO, ATRASADO }
enum Prioridade { ALTA, MEDIA, NORMAL, BAIXA }

// ===================== CLASSES =====================
class Usuario {
    private String nome, email, login, senha, cargo;
    private Perfil perfil;
    private List<Projeto> projetos = new ArrayList<>();

    public Usuario(String nome, String email, String login, String senha, String cargo, Perfil perfil) {
        this.nome = nome; this.email = email; this.login = login; this.senha = senha;
        this.cargo = cargo; this.perfil = perfil;
    }

    public String getNome() { return nome; }
    public String getEmail() { return email; }
    public String getLogin() { return login; }
    public String getSenha() { return senha; }
    public Perfil getPerfil() { return perfil; }
    public List<Projeto> getProjetos() { return projetos; }

    public void adicionarProjeto(Projeto p) {
        if (projetos.size() < 4) projetos.add(p);
        else System.out.println("❌ Usuário já está em 4 projetos.");
    }
}

class Tarefa {
    private String descricao, motivoCancelamento, motivoAtraso;
    private LocalDate inicio, fimPrevisto, fimReal;
    private Status status;
    private Prioridade prioridade;
    private Usuario responsavel;

    public Tarefa(String descricao, LocalDate inicio, LocalDate fimPrevisto, Prioridade prioridade, Usuario responsavel) {
        this.descricao = descricao; this.inicio = inicio; this.fimPrevisto = fimPrevisto;
        this.prioridade = prioridade; this.responsavel = responsavel; this.status = Status.PLANEJANDO;
    }

    public void concluir() {
        fimReal = LocalDate.now();
        if(fimReal.isAfter(fimPrevisto)) {
            status = Status.ATRASADO;
            Scanner sc = new Scanner(System.in);
            System.out.println("⚠️ Informe o motivo do atraso:");
            motivoAtraso = sc.nextLine();
        } else {
            status = Status.CONCLUIDO;
        }
        notificar("conclusão");
    }

    public void cancelar() {
        status = Status.CANCELADO;
        Scanner sc = new Scanner(System.in);
        System.out.println("❌ Informe o motivo do cancelamento:");
        motivoCancelamento = sc.nextLine();
        notificar("cancelamento");
    }

    private void notificar(String tipo) {
        System.out.println("\n=== Notificação (simulada) ===");
        System.out.println("Para: " + responsavel.getEmail());
        if(tipo.equals("conclusão")) System.out.println("Mensagem: Obrigado por concluir a tarefa \"" + descricao + "\"!");
        else System.out.println("Mensagem: Tarefa \"" + descricao + "\" cancelada. Motivo: " + motivoCancelamento);
        System.out.println("Para: Administrador e Gerente (simulado)");
        System.out.println("Mensagem: " + responsavel.getNome() + " atualizou a tarefa \"" + descricao + "\" com status " + status);
        System.out.println("=============================\n");
    }

    public String exportarCSV(String projeto, Usuario admin, Usuario gerente) {
        return projeto + ";" + admin.getNome() + ";" + gerente.getNome() + ";" + responsavel.getNome() + ";" +
               descricao + ";" + inicio + ";" + fimPrevisto + ";" + status + ";" +
               (motivoCancelamento != null ? motivoCancelamento : motivoAtraso != null ? motivoAtraso : "");
    }

    @Override
    public String toString() {
        return descricao + " | Resp: " + responsavel.getNome() + " | Status: " + status;
    }
}

class Projeto {
    private String nome, descricao;
    private Usuario administrador, gerente;
    private List<Usuario> equipe = new ArrayList<>();
    private List<Tarefa> tarefas = new ArrayList<>();

    public Projeto(String nome, String descricao, Usuario admin, Usuario gerente) {
        this.nome = nome; this.descricao = descricao; this.administrador = admin; this.gerente = gerente;
    }

    public void adicionarMembro(Usuario u) {
        if(u.getProjetos().size() < 4) {
            equipe.add(u); u.adicionarProjeto(this);
        } else {
            System.out.println("❌ Usuário já está em 4 projetos.");
        }
    }

    public void adicionarTarefa(Tarefa t) { tarefas.add(t); }
    public List<Tarefa> getTarefas() { return tarefas; }
    public Usuario getAdministrador() { return administrador; }
    public Usuario getGerente() { return gerente; }
    public String getNome() { return nome; }
    public List<Usuario> getEquipe() { return equipe; }

    public void exportarCSV() {
        try(FileWriter writer = new FileWriter("projetos_export.csv", true)) {
            for(Tarefa t: tarefas) writer.write(t.exportarCSV(nome, administrador, gerente) + "\n");
            System.out.println("✅ Dados exportados para projetos_export.csv");
        } catch(IOException e) {
            System.out.println("Erro ao exportar CSV: " + e.getMessage());
        }
    }

    @Override
    public String toString() {
        return "\nProjeto: " + nome + "\nDescrição: " + descricao + "\nAdministrador: " + administrador.getNome() +
               "\nGerente: " + gerente.getNome() + "\nEquipe: " + equipe.size() + " membros\nTarefas: " + tarefas.size();
    }
}

// ===================== SISTEMA =====================
public class SistemaFinal {
    private static List<Usuario> usuarios = new ArrayList<>();
    private static List<Projeto> projetos = new ArrayList<>();
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        seedUsuarios();
        menuLogin();
    }

    private static void seedUsuarios() {
        usuarios.add(new Usuario("Lucas Silva","lucas.silva@email.com","lucas.silva","Padrao123","PO",Perfil.ADMINISTRADOR));
        usuarios.add(new Usuario("Carol Cavalcante","carol.cavalcante@email.com","carol.cavalcante","Padrao123","Gerente",Perfil.GERENTE));
        usuarios.add(new Usuario("Thamiris Marie","thamiris.marie@email.com","thamiris.marie","Padrao123","Analista",Perfil.COLABORADOR));
        usuarios.add(new Usuario("Rodrigo Bat","rodrigo.bat@email.com","rodrigo.bat","Padrao123","Analista",Perfil.COLABORADOR));
    }

    private static void menuLogin() {
        System.out.println("\n===== LOGIN =====");
        System.out.print("Login ou E-mail: "); String login = scanner.nextLine();
        System.out.print("Senha: "); String senha = scanner.nextLine();

        Usuario usuario = autenticar(login, senha);
        if(usuario == null) { System.out.println("❌ Credenciais inválidas."); menuLogin(); }
        else { System.out.println("✅ Bem-vindo, " + usuario.getNome()); menuPrincipal(usuario); }
    }

    private static Usuario autenticar(String loginOuEmail, String senha) {
        for(Usuario u: usuarios) if((u.getLogin().equalsIgnoreCase(loginOuEmail) || u.getEmail().equalsIgnoreCase(loginOuEmail)) && u.getSenha().equals(senha)) return u;
        return null;
    }

    private static void menuPrincipal(Usuario usuario) {
        boolean rodando = true;
        while(rodando) {
            System.out.println("\n===== MENU PRINCIPAL =====");
            System.out.println("1. Criar Projeto");
            System.out.println("2. Listar Projetos");
            System.out.println("3. Abrir Projeto");
            System.out.println("4. Exportar Projetos para CSV");
            System.out.println("5. Sair");
            System.out.print("Escolha: "); int opcao = Integer.parseInt(scanner.nextLine());

            switch(opcao) {
                case 1 -> criarProjeto(usuario);
                case 2 -> listarProjetos();
                case 3 -> abrirProjeto(usuario);
                case 4 -> exportarProjetos();
                case 5 -> { rodando=false; System.out.println("Até mais!"); }
                default -> System.out.println("Opção inválida.");
            }
        }
    }

    private static void criarProjeto(Usuario usuario) {
        System.out.print("Nome do projeto: "); String nome = scanner.nextLine();
        System.out.print("Descrição: "); String desc = scanner.nextLine();
        Projeto projeto = new Projeto(nome, desc, usuario, usuario);
        projetos.add(projeto);
        usuario.adicionarProjeto(projeto);
        System.out.println("✅ Projeto criado: " + nome);
    }

    private static void listarProjetos() {
        if(projetos.isEmpty()) { System.out.println("Nenhum projeto cadastrado."); return; }
        for(int i=0;i<projetos.size();i++) {
            Projeto p = projetos.get(i);
            System.out.println(i + " - " + p.getNome() + " | Gerente: " + p.getGerente().getNome() + " | Membros: " + p.getEquipe().size());
        }
    }

    private static void abrirProjeto(Usuario usuario) {
        listarProjetos();
        System.out.print("Número do projeto para abrir: "); int idx = Integer.parseInt(scanner.nextLine());
        if(idx<0 || idx>=projetos.size()) { System.out.println("Projeto inválido."); return; }
        Projeto p = projetos.get(idx);
        System.out.println("Abrindo projeto: " + p.getNome());
    }

    private static void exportarProjetos() { for(Projeto p: projetos) p.exportarCSV(); }
}
